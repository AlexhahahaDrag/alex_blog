package ${package.Controller};

import ${package.Vo}.${table.voName};
import com.alex.blog.admin.annotion.authorityVerify.AuthorityVerify;
import com.alex.blog.admin.annotion.avoidRepeatableCommit.AvoidRepeatableCommit;
import com.alex.blog.admin.annotion.operationLogger.OperationLogger;
import com.alex.blog.base.validator.group.Delete;
import com.alex.blog.base.validator.group.GetList;
import com.alex.blog.base.validator.group.Insert;
import com.alex.blog.base.validator.group.Update;
import com.alex.blog.common.exception.ThrowableUtils;
import com.alex.blog.utils.utils.ResultUtil;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.beans.factory.annotation.Autowired;
import java.util.List;
<% if(swagger){ %>
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
<% } %>
import org.springframework.web.bind.annotation.RequestMapping;
import ${package.Service}.${table.serviceName};
<% if(restControllerStyle){ %>
import org.springframework.web.bind.annotation.RestController;
<% }else{ %>
import org.springframework.stereotype.Controller;
<% } %>
<% if(isNotEmpty(superControllerClassPackage)){ %>
import ${superControllerClassPackage};
<% } %>

/**
 * @description:  ${table.comment!}restApi
 * @author:       ${author}
 * @createDate: ${strutil.formatDate(date(), 'yyyy-MM-dd HH:mm:ss')}
 * @version:      1.0.0
 */
@Api(value = "${table.comment!}相关接口", tags = {"${table.comment!}相关接口"})
<% if(restControllerStyle){ %>
@RestController
<% }else{ %>
@Controller
<% } %>
@RequestMapping("<% if(isNotEmpty(package.ModuleName)){ %>/${package.ModuleName}<% } %>/<% if(isNotEmpty(controllerMappingHyphenStyle)){ %>${controllerMappingHyphen}<% }else{ %>${table.entityPath}<% } %>")
<% if(kotlin){ %>
class ${table.controllerName}<% if(isNotEmpty(superControllerClass)){ %> : ${superControllerClass}()<% } %>
<% }else{ %>
    <% if(isNotEmpty(superControllerClass)){ %>
public class ${table.controllerName} extends ${superControllerClass} {
    <% }else{ %>
public class ${table.controllerName} {
    <% } %>

    @Autowired
    private ${table.serviceName} ${strutil.toLowerCase(strutil.subStringTo(table.serviceName, 0, 1)) + strutil.subString (table.serviceName, 1)};

    @AuthorityVerify
    @ApiOperation(value = "获取${table.comment!}列表", notes = "获取${table.comment!}列表", response = String.class)
    @PostMapping(value = "/getList")
    public String getList(@Validated({GetList.class}) @RequestBody ${entity}Vo ${strutil.toLowerCase(strutil.subStringTo(entity, 0, 1)) + strutil.subString (entity, 1)}Vo) {
        return ResultUtil.resultSuccessWithData(${strutil.toLowerCase(strutil.subStringTo(table.serviceName, 0, 1)) + strutil.subString (table.serviceName, 1)}.getPageList(${strutil.toLowerCase(strutil.subStringTo(entity, 0, 1)) + strutil.subString (entity, 1)}Vo));
    }

    @AvoidRepeatableCommit
    @AuthorityVerify
    @ApiOperation(value = "新增${table.comment!}", notes = "新增${table.comment!}", response = String.class)
    @PutMapping(value = "/add")
    @OperationLogger(value = "新增${table.comment!}")
    public String add${entity}(@Validated({Insert.class}) @RequestBody ${entity}Vo ${strutil.toLowerCase(strutil.subStringTo(entity, 0, 1)) + strutil.subString (entity, 1)}Vo, BindingResult result) {
        ThrowableUtils.checkParamArgument(result);
        return ${strutil.toLowerCase(strutil.subStringTo(table.serviceName, 0, 1)) + strutil.subString (table.serviceName, 1)}.add${entity}(${strutil.toLowerCase(strutil.subStringTo(entity, 0, 1)) + strutil.subString (entity, 1)}Vo);
    }

    @AuthorityVerify
    @ApiOperation(value = "修改${table.comment!}", notes = "修改${table.comment!}", response = String.class)
    @PutMapping(value = "/edit")
    @OperationLogger(value = "修改${table.comment!}")
    public String edit${entity}(@Validated({Update.class}) @RequestBody ${entity}Vo ${strutil.toLowerCase(strutil.subStringTo(entity, 0, 1)) + strutil.subString (entity, 1)}Vo, BindingResult result) {
        ThrowableUtils.checkParamArgument(result);
        return ${strutil.toLowerCase(strutil.subStringTo(table.serviceName, 0, 1)) + strutil.subString (table.serviceName, 1)}.edit${entity}(${strutil.toLowerCase(strutil.subStringTo(entity, 0, 1)) + strutil.subString (entity, 1)}Vo);
    }

    @AuthorityVerify
    @ApiOperation(value = "删除${table.comment!}", notes = "删除${table.comment!}", response = String.class)
    @DeleteMapping(value = "/deleteBatch")
    @OperationLogger(value = "删除${table.comment!}")
    public String deleteBatch(@Validated({Delete.class})
                              @ApiParam(value = "${table.comment!}ids", name = "ids", required = true)
                              @RequestParam(value = "ids") List<Long> ids) {
        return ${strutil.toLowerCase(strutil.subStringTo(table.serviceName, 0, 1)) + strutil.subString (table.serviceName, 1)}.deleteBatch${entity}(ids);
    }
}
<% } %>
